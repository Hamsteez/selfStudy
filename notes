REST API

App - client/frontend
Server - backend
Communicates through HTTP protocall.
Client calls services through HTTP requests.
REST: Representational State Transfer
Create Read Update Delete Data - CRUD operations
HTTP Methods: GET POST PUT DELETE

Node js
Runtime environment for executing JS code
Use node to build backend services such as APIs - Application Programming Interface
JS engine takes JS code and converts it so a computer can understand it.
Node is non-blocking asynchronous - can handle multiple requests.
Node uses an event que to send ready data to requests.
Ideal for I/O intensive apps.

setTimeout();
clearTimeout();

setInterval();
clearInterval();

Every file in a node application is considered a module
Every application has a main module
Variables or functions defined within a module are scoped to that module.

node wraps the code inside of a function, it doesnt run the code directly
  - Module Wrapper Function

Path module gets you the info regarding the path of the module.
  - const path = require('path');
  - var pathObj = path.parse(__filename);
OS module  - info about current operating system
fs module - work with files/directories in node - always use asynchronous methods.

Event is a signal that something happened in our application
Class is a container for properties and methods.

Emitter: When an event is raised, a listener does something
  const EventEmitter = require('events');
  const emitter = new EventEmitter();

  //Register a listener
  emitter.on('messageLogged', function() {
    console.log('Listener called');
  })

  // Raise an event
  emitter.emit('messageLogged');

